<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

    <!-- spring提供的实例化方式 第一种：在spring配置文件中直接配置类全路径，spring会自动调用该类的无参构造方法来实例化bean-->
    <bean id="sb" class="com.wdd.spring6.bean.SpringBean"/>

    <!-- spring提供的实例化方式 第二种：通过简单工厂模式，在spring配置文件中需要告诉spring框架，调用哪个类的哪个方法获取bean -->
    <!-- factory-method 属性指定的是工厂类中的静态方法，也就是告诉spring框架，调用这个方法可以获取bean -->
    <bean id="starBean" class="com.wdd.spring6.bean.StarFactory" factory-method="get"/>

    <!-- spring提供的实例化方式 第三种：通过工厂方法模式，通过factory-bean属性+factory-method属性来共同完成 -->
    <!-- 告诉spring框架，调用哪个对象的哪个方法来获取bean -->
    <bean id="gunFactory" class="com.wdd.spring6.bean.GunFactory"/>
    <!-- factory-bean属性告诉spring调用哪个对象，factory-method告诉spring调用该对象的哪个方法 -->
    <bean id="gun" factory-bean="gunFactory" factory-method="get"/>

    <!-- spring提供的实例化方式 第四种：通过FactoryBean接口实现 -->
    <!-- 这种方式实际就是第三种方式的简化 -->
    <!-- 通过一个特殊的Bean：工厂Bean，来返回一个普通的Bean -->
    <!-- 通过FactoryBean这个工厂Bean主要是想对普通Bean进行加工处理  -->
    <bean id="person" class="com.wdd.spring6.bean.PersonFactoryBean"/>

    <bean id="nowtime" class="java.util.Date"/>

    <bean id="student" class="com.wdd.spring6.bean.Student">
        <property name="birth" ref="nowtime"/>
    </bean>

    <bean id="date" class="com.wdd.spring6.bean.DateFactoryBean">
        <constructor-arg index="0" value="1999-07-27"/>
    </bean>

    <bean id="student2" class="com.wdd.spring6.bean.Student">
        <property name="birth" ref="date"/>
    </bean>

</beans>